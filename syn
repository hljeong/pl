#!/usr/bin/env python

from typing import DefaultDict, Any, Callable
from argparse import ArgumentParser
from collections import defaultdict

from common import Log, ast_to_tree_string, hexdump


def main():
    parser = ArgumentParser(prog="syn", description="synthesize pl programs")
    parser.add_argument("source")
    parser.add_argument(
        "target", help="mp0, a, a-ast, b, b-ast, b2, b2-ast, expr, or expr-ast"
    )
    parser.add_argument(
        "-s",
        "--source-lang",
        type=str,
        default=None,
        help="mp0, a, a-ast, b, b-ast, b2, b2-ast, expr, or expr-ast",
    )
    parser.add_argument(
        "-w",
        "--waypoints",
        nargs="*",
        type=str,
        default=[],
        help="force intermediates in synthesis path",
    )
    parser.add_argument("-o", "--output-file", type=str, default=None)
    parser.add_argument(
        "-l",
        "--log-level",
        type=str,
        default="e",
        help="[n]one, [w]arn, [d]ebug, [e]rror, or [t]race",
    )
    args = parser.parse_args()

    Log.at(args.log_level)

    from synthesis import Source, synthesize

    str_artifact: DefaultDict[str, Callable[[Any], str]] = defaultdict(
        lambda: str,
        {
            "mp0": hexdump,
            "a-ast": ast_to_tree_string,
            "b-ast": ast_to_tree_string,
            "b2-ast": ast_to_tree_string,
            "expr-ast": ast_to_tree_string,
        },
    )

    artifact: Any = synthesize(
        args.target, Source.load(args.source), args.source_lang, args.waypoints
    )

    if not args.output_file:
        print(str_artifact[args.target](artifact))

    else:
        with open(args.output_file, "w+") as f:
            f.write(str_artifact[args.target](artifact))


if __name__ == "__main__":
    main()
