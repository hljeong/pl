<b2> ::= declarations=<declaration>+;

<declaration> ::=

  "fn" name=<function> "(" params=<parameter_list>? ")" body=<block>;

<block> ::=

  statement=<statement> |

  "{" statements=<statement>* "}";

<statement> ::=

  expr=<expression> ";" |

  "while" "(" cond=<expression> ")" body=<block> |

  "if" "(" cond=<expression> ")" body=<block> |

  "return" ret=<expression>? ";";

<parameter_list> ::= first=<variable> rest=("," param=<variable>)*;

<argument_list> ::= first=<expression> rest=("," arg=<expression>)*;

<expression> ::= expr=<or_expression> | asgn=<assignment_expression>;

<expression> ::= expr=<assignment_expression>;

<assignment_expression> ::= expr=<relational_expression> | lhs=<store> "=" rhs=<assignment_expression>;

<relational_expression> ::= lexpr=<or_expression> rest=(<relational_operator> expr=<or_expression>)*;

<or_expression> ::= lexpr=<xor_expression> rest=("|" expr=<xor_expression>)*;

<xor_expression> ::= lexpr=<and_expression> rest=("^" expr=<and_expression>)*;

<and_expression> ::= lexpr=<shift_expression> rest=("&" expr=<shift_expression>)*;

<shift_expression> ::= lexpr=<additive_expression> rest=(<shift_operator> expr=<additive_expression>)*;

<additive_expression> ::= lexpr=<multiplicative_expression> rest=(<additive_operator> expr=<multiplicative_expression>)*;

<multiplicative_expression> ::= lexpr=<unary_expression> rest=(<multiplicative_operator> expr=<unary_expression>)*;

<unary_expression> ::= ops=<unary_operator>* expr=<primary_expression>;

<primary_expression> ::=

  "(" expr=<expression> ")" |

  fn=<function> "(" args=<argument_list>? ")" |

  <array_access> |

  <integer> |

  <string> |

  <variable>;


<relational_operator> ::= "==" | "!=" | "<" | "<=" | ">" | ">=";

<shift_operator> ::= "<<" | ">>";

<additive_operator> ::= "+" | "-";

<multiplicative_operator> ::= "*" | "/" | "%";

<unary_operator> ::= "!" | "~" | "-";

<store> ::= <variable> | <array_access>;

<array_access> ::= arr=<variable> "[" idx=<expression> "]";

alias <function> ::= identifier;

alias <variable> ::= identifier;

alias <string> ::= escaped_string;

alias <integer> ::= decimal_integer;
